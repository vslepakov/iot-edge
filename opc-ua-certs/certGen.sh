#!/bin/bash

## Copyright (c) Microsoft. All rights reserved.
## Licensed under the MIT license. See LICENSE file in the project root for full license information.

###############################################################################
# This script demonstrates creating X.509 certificates for an Azure IoT Hub
# CA Cert deployment.
#
# These certs MUST NOT be used in production.  It is expected that production
# certificates will be created using a company's proper secure signing process.
# These certs are intended only to help demonstrate and prototype CA certs.
###############################################################################
set -e

###############################################################################
# Define Variables
###############################################################################
ALGORITHM="genrsa"
RSA_CA_KEY_BITS_LENGTH="4096"
RSA_NON_CA_KEY_BITS_LENGTH="2048"
# Get directory of running script
SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
CERTIFICATE_DIR="${SCRIPT_DIR}"
OPENSSL_CONFIG_FILE="${CERTIFICATE_DIR}/iiot_certs_openssl.cnf"
# if you would like to override the default 30 day validity period, use
# env variable DEFAULT_VALIDITY_DAYS and set the duration in units of days
DEFAULT_VALIDITY_DAYS=${DEFAULT_VALIDITY_DAYS:=30}
ROOT_CA_PREFIX="azure-iiot-test-only.root.ca"
ROOT_CA_PASSWORD=${ROOT_CA_PASSWORD:="1234"}
INTERMEDIATE_CA_PREFIX="azure-iiot-test-only.intermediate"
INTERMEDIATE_CA_PASSWORD="1234"
FORCE_NO_PROD_WARNING=${FORCE_NO_PROD_WARNING:="false"}
export CERTIFICATE_OUTPUT_DIR=${CERTIFICATE_DIR}

###############################################################################
# Disclaimer print
###############################################################################
function warn_certs_not_for_production()
{
    if [ "$FORCE_NO_PROD_WARNING" != "true" ]; then
        tput smso
        tput setaf 3
        echo "Certs generated by this script are not for production (e.g. they have hard-coded passwords of '${ROOT_CA_PASSWORD}'."
        echo "This script is only to help you understand Azure IoT Hub CA Certificates."
        echo "Use your official, secure mechanisms for this cert generation."
        echo "Also note that these certs will expire in ${DEFAULT_VALIDITY_DAYS} days."
        tput sgr0
    fi
    exit 0
}

###############################################################################
#  Checks for all pre reqs before executing this script
###############################################################################
function check_prerequisites()
{
    local exists=$(command -v -- openssl)
    if [ -z "$exists" ]; then
        echo "openssl is required to run this script, please install this before proceeding"
        exit 1
    fi

    if [ ! -f ${OPENSSL_CONFIG_FILE} ]; then
        echo "Missing configuration file ${OPENSSL_CONFIG_FILE}"
        exit 1
    fi
}

###############################################################################
#  Creates required directories and removes left over cert files.
#  Run prior to creating Root CA; after that these files need to persist.
###############################################################################
function prepare_filesystem()
{
    rm -rf ${CERTIFICATE_DIR}/csr
    rm -rf ${CERTIFICATE_DIR}/private
    rm -rf ${CERTIFICATE_DIR}/certs
    rm -rf ${CERTIFICATE_DIR}/newcerts

    mkdir -p ${CERTIFICATE_DIR}/csr
    mkdir -p ${CERTIFICATE_DIR}/private
    mkdir -p ${CERTIFICATE_DIR}/certs
    mkdir -p ${CERTIFICATE_DIR}/newcerts

    rm -f ${CERTIFICATE_DIR}/index.txt
    touch ${CERTIFICATE_DIR}/index.txt

    rm -f ${CERTIFICATE_DIR}/serial
    echo 1000 > ${CERTIFICATE_DIR}/serial
}

###############################################################################
# Generate root CA Cert
###############################################################################
function generate_root_ca()
{
    local common_name="/CN=Azure_IIoT_CA_Cert_Test_Only"
    local password_cmd=" -aes256 -passout pass:${ROOT_CA_PASSWORD} "

    local key_file=${CERTIFICATE_DIR}/private/${ROOT_CA_PREFIX}.key.pem
    local cert_file=${CERTIFICATE_DIR}/certs/${ROOT_CA_PREFIX}.cert.pem

    echo "Creating the root CA private key"
    openssl ${ALGORITHM} \
            ${password_cmd} \
            -out ${key_file} \
            ${RSA_CA_KEY_BITS_LENGTH}
    [ $? -eq 0 ] || exit $?
    chmod 400 ${key_file}
    [ $? -eq 0 ] || exit $?

    echo "CA root key generated at:"
    echo "---------------------------------"
    echo "    ${key_file}"
    echo ""

    echo "Creating the root CA certificate"
    password_cmd=" -passin pass:${ROOT_CA_PASSWORD} "
    openssl req \
            -new \
            -x509 \
            -config ${OPENSSL_CONFIG_FILE} \
            ${password_cmd} \
            -key ${key_file} \
            -subj "/CN=${common_name}" \
            -days ${DEFAULT_VALIDITY_DAYS} \
            -sha256 \
            -extensions "v3_ca" \
            -out ${cert_file}
    [ $? -eq 0 ] || exit $?
    chmod 444 ${cert_file}
    [ $? -eq 0 ] || exit $?

    echo "CA Root certificate generated at:"
    echo "---------------------------------"
    echo "    ${cert_file}"
    echo ""
    openssl x509 -noout -text -in ${cert_file}
    [ $? -eq 0 ] || exit $?
}

###############################################################################
# Generate a Certificate for a IoT or Edge device using a specific openssl
# extension and signed with either the root or intermediate cert.
###############################################################################
function generate_certificate_common()
{
    local extension="${1}"
    local expiration_days="${2}"
    local subject="${3}"
    local prefix="${4}"
    local issuer_prefix="${5}"
    local key_pass="${6}"
    local issuer_key_pass="${7}"

    # setup all the necessary paths and variables
    local key_file="${CERTIFICATE_DIR}/private/${prefix}.key.pem"
    local cert_file="${CERTIFICATE_DIR}/certs/${prefix}.cert.pem"
    local cert_pfx_file="${CERTIFICATE_DIR}/certs/${prefix}.cert.pfx"
    local cert_full_chain_file="${CERTIFICATE_DIR}/certs/${prefix}-full-chain.cert.pem"
    local csr_file="${CERTIFICATE_DIR}/csr/${prefix}.csr.pem"
    local issuer_key_file="${CERTIFICATE_DIR}/private/${issuer_prefix}.key.pem"
    local issuer_cert_file="${CERTIFICATE_DIR}/certs/${issuer_prefix}.cert.pem"
    local issuer_cert_full_chain_file="${CERTIFICATE_DIR}/certs/${issuer_prefix}-full-chain.cert.pem"
    local root_ca_cert_file="${CERTIFICATE_DIR}/certs/${ROOT_CA_PREFIX}.cert.pem"
    local issuer_chain=""
    if [ "${issuer_prefix}" == "${ROOT_CA_PREFIX}" ]; then
        issuer_chain=${root_ca_cert_file}
    else
        issuer_chain=${issuer_cert_full_chain_file}
    fi

    # delete any older files that may exist from prior runs
    rm -f ${key_file}
    rm -f ${cert_file}
    rm -f ${cert_pfx_file}
    rm -f ${cert_full_chain_file}
    rm -f ${csr_file}

    if [ ${extension} == "v3_ca" ]; then
        key_bits_length=${RSA_CA_KEY_BITS_LENGTH}
    elif [ ${extension} == "v3_intermediate_ca" ]; then
        key_bits_length=${RSA_CA_KEY_BITS_LENGTH}
    else
        key_bits_length=${RSA_NON_CA_KEY_BITS_LENGTH}
    fi

    echo "Creating key for ${prefix}"
    echo "----------------------------------------"
    local password_cmd=""
    if [ ! -z ${key_pass} ]; then
        password_cmd=" -aes256 -passout pass:${key_pass} "
    fi
    openssl ${ALGORITHM} \
            ${password_cmd} \
            -out ${key_file} \
            ${key_bits_length}
    [ $? -eq 0 ] || exit $?
    chmod 444 ${key_file}
    [ $? -eq 0 ] || exit $?

    password_cmd=""
    if [ ! -z ${key_pass} ]; then
        password_cmd=" -passin pass:${key_pass} "
    fi
    echo "Create CSR for ${prefix}"
    echo "----------------------------------------"
    openssl req -new -sha256 ${password_cmd} \
        -config ${OPENSSL_CONFIG_FILE} \
        -key ${key_file} \
        -subj "${subject}" \
        -out ${csr_file}
    [ $? -eq 0 ] || exit $?

    local issuer_key_passwd_command=""
    if [ ! -z ${issuer_key_pass} ]; then
        issuer_key_passwd_command="-passin pass:${issuer_key_pass}"
    fi
    echo "Create certificate for ${prefix} using ${issuer_key_file}"
    echo "----------------------------------------"
    openssl ca -batch -config ${OPENSSL_CONFIG_FILE} \
            -extensions ${extension} \
            -days ${expiration_days} -notext -md sha256 \
            -cert ${issuer_cert_file} \
            -keyfile ${issuer_key_file} -keyform PEM \
            ${issuer_key_passwd_command} \
            -in ${csr_file} \
            -out ${cert_file} \
            -outdir ${CERTIFICATE_DIR}/newcerts
    [ $? -eq 0 ] || exit $?
    chmod 444 ${cert_file}
    [ $? -eq 0 ] || exit $?

    echo "Verify signature of the ${prefix}" \
         " certificate with the signer"
    echo "-----------------------------------"
    verify_untrusted=""
    if [ ${issuer_prefix} != ${ROOT_CA_PREFIX} ]; then
        verify_untrusted="-untrusted ${issuer_cert_full_chain_file}"
    fi
    openssl verify -CAfile ${root_ca_cert_file} ${verify_untrusted} ${cert_file}
    [ $? -eq 0 ] || exit $?

    echo "Certificate for ${prefix} generated at:"
    echo "----------------------------------------"
    echo "    ${cert_file}"
    echo ""
    openssl x509 -noout -text -in ${cert_file}
    [ $? -eq 0 ] || exit $?

    cat ${cert_file} \
        ${issuer_chain} > \
        ${cert_full_chain_file}
    [ $? -eq 0 ] || exit $?
    echo "Full chain certificate for ${prefix} generated at:"
    echo "----------------------------------------"
    echo "    ${cert_full_chain_file}"
    echo ""

    local key_passwd_command=" -passin pass:${key_pass} -passout pass:${key_pass} "
    # if [ ! -z ${key_pass} ]; then
    #     key_passwd_command="-passin pass:${key_pass} -passout pass:${key_pass}"
    # fi
    echo "Create the ${prefix} PFX certificate"
    echo "----------------------------------------"
    openssl pkcs12 -export \
            -in ${cert_file} \
            -certfile ${issuer_chain} \
            -inkey ${key_file} \
            ${key_passwd_command} \
            -name ${prefix} \
            -out ${cert_pfx_file}
    [ $? -eq 0 ] || exit $?

    echo "PFX certificate for ${prefix} generated at:"
    echo "--------------------------------------------"
    echo "    ${cert_pfx_file}"
}

###############################################################################
# Generate Intermediate CA Cert
###############################################################################
function generate_intermediate_ca()
{
    local root_ca_password="${1}"
    local common_name="/CN=Azure_IIoT_Intermediate_Cert_Test_Only"

    generate_certificate_common "v3_intermediate_ca" \
                                ${DEFAULT_VALIDITY_DAYS} \
                                ${common_name} \
                                ${INTERMEDIATE_CA_PREFIX} \
                                ${ROOT_CA_PREFIX} \
                                ${INTERMEDIATE_CA_PASSWORD} \
                                ${root_ca_password}
}

###############################################################################
# Generates a root and intermediate certificate for CA certs.
###############################################################################
function initial_cert_generation()
{
    check_prerequisites
    prepare_filesystem
    setEnvs "" ""
    generate_root_ca
    generate_intermediate_ca ${ROOT_CA_PASSWORD}
}

urlencode() {
    # urlencode <string>
    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf "$c" ;;
            *) printf '%%%02X' "'$c" ;;
        esac
    done
}

setEnvs() {
    export FQDN=${1}
    export COMMON_NAME=$(urlencode "${2}")
    export LOCALITY=Redmond
}

###############################################################################
# Generates a certificate for a device, chained to the intermediate.
###############################################################################
function generate_opcua_certificate()
{
    if [[ $# -ne 2 ]] || [[ -z ${1} ]] || [[ -z ${2} ]]; then
        echo "Usage error: Please provide a <hostname> and a <commonName>"
        exit 1
    fi

    local fqdn=$(urlencode "${1}")
    local commonName=$(urlencode "${2}")
    local subject="/DC=${fqdn}/emailAddress=iiotsupport@contoso.com/CN=${commonName}/OU=Contoso IT Security/O=Contoso Inc./L=Redmond/S=OR/C=US"

    setEnvs ${fqdn} ${commonName}
    generate_certificate_common "usr_cert" \
                                ${DEFAULT_VALIDITY_DAYS} \
                                "${subject}" \
                                "publisher" \
                                ${INTERMEDIATE_CA_PREFIX} \
                                "" \
                                ${INTERMEDIATE_CA_PASSWORD}
}

if [ "${1}" == "create_root_and_intermediate" ]; then
    initial_cert_generation
elif [ "${1}" == "create_opcua_certificate" ]; then
    generate_opcua_certificate "${2}" "${3}"
else
    echo "Usage: create_root_and_intermediate                   # Creates a new root and intermediate certificates"
    echo "       generate_opcua_certificate <hostname> <commonName>        # Creates a opc ua certificate, signed with <subjectName>"
    exit 1
fi

warn_certs_not_for_production
